package br.com.oslunaticos.player;

import javax.swing.JFileChooser;

/**
 *
 * @author Eduardo Folly
 */
public class Visualizador extends javax.swing.JFrame implements BeatMsg {

    private float mult;
    private float multr;
    private float multg;
    private float multb;
    private SerialColor serialColor;
    private Tocador tocador = new Tocador(this);
    private int nextColor = 0;
    private int resolution;
    //--
    private boolean continua = true;
    private int nColor = 0;
    private int color = 0;

    /**
     * Creates new form Visualizador
     */
    public Visualizador() {
        initComponents();
        mult = busterTotal.getValue();
        labelTotal.setText(String.valueOf(mult));
        multr = busterR.getValue();
        labelR.setText(String.valueOf(multr));
        multg = busterG.getValue();
        labelG.setText(String.valueOf(multg));
        multb = busterB.getValue();
        labelB.setText(String.valueOf(multb));

        resolution = busterRes.getValue();
        labelRes.setText(String.valueOf(resolution) + "ms");
        tocador.setResolution(resolution);

        serialColor = new SerialColor();

        labelRep.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        botaoAbrir = new javax.swing.JButton();
        botaoPlay = new javax.swing.JButton();
        botaoStop = new javax.swing.JButton();
        labelRep = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        busterTotal = new javax.swing.JSlider();
        labelTotal = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        busterR = new javax.swing.JSlider();
        labelR = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        busterG = new javax.swing.JSlider();
        labelG = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        busterB = new javax.swing.JSlider();
        labelB = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        busterRes = new javax.swing.JSlider();
        labelRes = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Visualizador");

        botaoAbrir.setText("Abrir");
        botaoAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoAbrirActionPerformed(evt);
            }
        });

        botaoPlay.setText("Play/Pause");
        botaoPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoPlayActionPerformed(evt);
            }
        });

        botaoStop.setText("Stop");
        botaoStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoStopActionPerformed(evt);
            }
        });

        labelRep.setText("labelRep");

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel2.setText("Iluminação:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 6);
        jPanel1.add(jLabel2, gridBagConstraints);

        busterTotal.setMaximum(10);
        busterTotal.setMinimum(1);
        busterTotal.setValue(3);
        busterTotal.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                busterTotalStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel1.add(busterTotal, gridBagConstraints);

        labelTotal.setText("0.0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        jPanel1.add(labelTotal, gridBagConstraints);

        jLabel3.setText("Vermelho:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 6);
        jPanel1.add(jLabel3, gridBagConstraints);

        busterR.setMaximum(25);
        busterR.setMinimum(1);
        busterR.setValue(2);
        busterR.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                busterRStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel1.add(busterR, gridBagConstraints);

        labelR.setText("0.0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel1.add(labelR, gridBagConstraints);

        jLabel4.setText("Verde:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 6);
        jPanel1.add(jLabel4, gridBagConstraints);

        busterG.setMaximum(25);
        busterG.setMinimum(1);
        busterG.setValue(6);
        busterG.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                busterGStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel1.add(busterG, gridBagConstraints);

        labelG.setText("0.0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel1.add(labelG, gridBagConstraints);

        jLabel5.setText("Azul:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 6);
        jPanel1.add(jLabel5, gridBagConstraints);

        busterB.setMaximum(25);
        busterB.setMinimum(1);
        busterB.setValue(12);
        busterB.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                busterBStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel1.add(busterB, gridBagConstraints);

        labelB.setText("0.0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel1.add(labelB, gridBagConstraints);

        jLabel1.setText("Atualização:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 6);
        jPanel1.add(jLabel1, gridBagConstraints);

        busterRes.setMajorTickSpacing(40);
        busterRes.setMaximum(260);
        busterRes.setMinimum(100);
        busterRes.setMinorTickSpacing(40);
        busterRes.setPaintLabels(true);
        busterRes.setSnapToTicks(true);
        busterRes.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                busterResStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel1.add(busterRes, gridBagConstraints);

        labelRes.setText("100ms");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel1.add(labelRes, gridBagConstraints);

        jLabel6.setFont(jLabel6.getFont().deriveFont(jLabel6.getFont().getStyle() | java.awt.Font.BOLD));
        jLabel6.setText("Equalização");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.insets = new java.awt.Insets(12, 0, 0, 0);
        jPanel1.add(jLabel6, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(botaoAbrir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botaoPlay)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botaoStop)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(labelRep, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botaoAbrir)
                    .addComponent(botaoPlay)
                    .addComponent(botaoStop))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelRep, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-434)/2, (screenSize.height-306)/2, 434, 306);
    }// </editor-fold>//GEN-END:initComponents

    private void botaoAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoAbrirActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setMultiSelectionEnabled(false);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            String arq = chooser.getSelectedFile().getAbsolutePath();
            tocador.abrir(arq);
            labelRep.setText(arq);
        }
    }//GEN-LAST:event_botaoAbrirActionPerformed

    private void busterRStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_busterRStateChanged
        multr = busterR.getValue();
        labelR.setText(String.valueOf(multr));
    }//GEN-LAST:event_busterRStateChanged

    private void busterGStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_busterGStateChanged
        multg = busterG.getValue();
        labelG.setText(String.valueOf(multg));
    }//GEN-LAST:event_busterGStateChanged

    private void busterBStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_busterBStateChanged
        multb = busterB.getValue();
        labelB.setText(String.valueOf(multb));
    }//GEN-LAST:event_busterBStateChanged

    private void busterTotalStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_busterTotalStateChanged
        mult = busterTotal.getValue();
        labelTotal.setText(String.valueOf(mult));
    }//GEN-LAST:event_busterTotalStateChanged

    private void botaoPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoPlayActionPerformed
        tocador.play();
    }//GEN-LAST:event_botaoPlayActionPerformed

    private void botaoStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoStopActionPerformed
        tocador.stop();
    }//GEN-LAST:event_botaoStopActionPerformed

    private void busterResStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_busterResStateChanged
        resolution = busterRes.getValue();
        labelRes.setText(String.valueOf(resolution) + "ms");
        tocador.setResolution(resolution);
    }//GEN-LAST:event_busterResStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Visualizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Visualizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Visualizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Visualizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Visualizador().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoAbrir;
    private javax.swing.JButton botaoPlay;
    private javax.swing.JButton botaoStop;
    private javax.swing.JSlider busterB;
    private javax.swing.JSlider busterG;
    private javax.swing.JSlider busterR;
    private javax.swing.JSlider busterRes;
    private javax.swing.JSlider busterTotal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel labelB;
    private javax.swing.JLabel labelG;
    private javax.swing.JLabel labelR;
    private javax.swing.JLabel labelRep;
    private javax.swing.JLabel labelRes;
    private javax.swing.JLabel labelTotal;
    // End of variables declaration//GEN-END:variables

    @Override
    public void colorFade(float r, float g, float b) {
        r = r * mult;
        g = g * mult;
        b = b * mult;

        r = r * multr;
        g = g * multg;
        b = b * multb;

        int x = (int) (r > 255 ? 255 : r);
        int y = (int) (g > 255 ? 255 : g);
        int z = (int) (b > 255 ? 255 : b);

        nextColor = (x * 65536) + (y * 256) + z;
    }

    @Override
    public void playing() {
        System.out.println("Tocando...");
        continua = true;
        new Thread(new Consumer()).start();
    }

    @Override
    public void stoped() {
        System.out.println("Parado.");
        labelRep.setText("");
        continua = false;
    }

    @Override
    public void paused() {
        System.out.println("Pausado.");
        continua = false;
    }

    private class Consumer implements Runnable {

        @Override
        public void run() {
            int step = 20;
            int[][] buffer = new int[step][3];
            int point = 0;

            while (continua) {
                long start = System.nanoTime();
                if (nextColor != nColor) {
                    color = nColor;
                    nColor = nextColor;
                    point = 0;

                    float rini = color >> 16 & 0xFF;
                    float gini = color >> 8 & 0xFF;
                    float bini = color & 0xFF;

                    float rfim = nColor >> 16 & 0xFF;
                    float gfim = nColor >> 8 & 0xFF;
                    float bfim = nColor & 0xFF;

                    float dr = (rfim - rini) / step;
                    float dg = (gfim - gini) / step;
                    float db = (bfim - bini) / step;

                    for (int x = 0; x < step; x++) {
                        int m = x + 1;
                        buffer[x][0] = (int) (rini + (m * dr));
                        buffer[x][1] = (int) (gini + (m * dg));
                        buffer[x][2] = (int) (bini + (m * db));
                    }
                }

                if (point < buffer.length) {
                    color = (buffer[point][0] * 65536) + (buffer[point][1] * 256) + buffer[point][2];
                    serialColor.sendColor(color);
                    point++;
                }

                float dif = ((resolution / step) - ((System.nanoTime() - start) / 1000000f));

                try {
                    Thread.sleep((int) Math.ceil(dif));
                } catch (Exception ex) {
                }
            }
        }
    }
}
